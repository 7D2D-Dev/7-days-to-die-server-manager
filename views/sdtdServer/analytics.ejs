<%- exposeLocalsToBrowser() %>

  <div class="container-fluid">

    <nav aria-label="breadcrumb">
      <ol class="breadcrumb">
        <li class="breadcrumb-item">
          <a href="<%= '/user/' + req.session.userId + '/dashboard' %>"> Dashboard </a>
        </li>
        <li class="breadcrumb-item">
          <a href="<%= '/sdtdserver/' + server.id + '/dashboard' %>">
            <%= server.name %>
          </a>
        </li>
        <li class="breadcrumb-item active" aria-current="page">Analytics</li>
      </ol>
    </nav>

    <h1>
      <%= server.name %> analytics</h1>

    <div id="narrow-down" class="form-group">

      <label for="datetimes">Select time range</label>
      <input type="text" class="form-control" name="datetimes" />

    </div>

    <div class="form-group">
      <label for="data-label">dataPoint</label>
      <select class="form-control" name="data-label" id="data-label">
        <option value="fps">FPS</option>
        <option value="players">Players</option>
        <option value="heap">Heap</option>
      </select>
    </div>

    <div class="form-group">
      <label for="charts-limit">Limit data</label>
      <input type="number" class="form-control" name="charts-limit" id="charts-limit" aria-describedby="charts-limit-help" value="250">
      <small id="charts-limit-help" class="form-text text-muted">This is the amount of data that will be drawn into the charts. If you want a more complete view, you can increase this.
        Be aware that browsers are known to crash when handling loads of data</small>
    </div>

    <div class="card">
      <div class="card-header">
        Chart
      </div>
      <div class="card-body">
        <h4 id="chart-analytics-stats" class="card-title"></h4>

        <p class="card-text">

          <canvas id="analytics-chart" width="100%"></canvas>

        </p>
      </div>
      <div id="chart-analytics-footer" class="card-footer text-muted">

        <i class="fas fa-spinner fa-spin"></i> Loading
      </div>
    </div>

  </div>

  <script>
    const minimum = array => Math.min(...array);
    const maximum = array => Math.max(...array);
    const average = array => array.reduce((a, b) => a + b, 0) / array.length;


    function drawAnalyticsChart(data, label) {
      const analyticsChartCanvas = $("#analytics-chart");

      if (window.analyticsChart) {
        window.analyticsChart.destroy()
      }


      window.analyticsChart = new Chart(analyticsChartCanvas, {
        type: 'line',
        data: {
          datasets: [{
            fill: false,
            yAxisID: 'analytics',
            borderColor: 'rgb(0, 102, 255)',
            backgroundColor: 'rgb(0, 102, 255)',
            label: label,
            data: data.map(dataPoint => {
              return {
                t: dataPoint.createdAt,
                y: dataPoint[label]
              }
            }),
          }, ]
        },
        options: {
          scales: {
            yAxes: [{
              id: 'analytics',
              type: 'linear',
              ticks: {
                beginAtZero: true
              }
            }, ],
            xAxes: [{
              type: 'time',
            }]
          }
        }
      })

      let date = new Date();
      $("#chart-analytics-footer").html(
        `<i class="fas fa-check"></i> Updated at ${date.toLocaleDateString()} ${date.toLocaleTimeString()} - ${data.length} data points`
      );

      if (data.length > 0) {

        let dataBeginDate = new Date(data[0].createdAt);
        let dataEndDate = new Date(data[data.length - 1].createdAt);
        $("#chart-analytics-stats").text(` ${dataEndDate.toDateString()} - ${dataBeginDate.toDateString()}`)
      }



    }

    $(document).ready(() => {

      let dateTimePicker = $('input[name="datetimes"]').daterangepicker({
        timePicker: true,
        startDate: 0,
        endDate: Date.now(),
      });

      let beginDate = new Date(0).valueOf();
      let endDate = Date.now();

      $('input[name="datetimes"]').on('apply.daterangepicker', function (ev, picker) {
        beginDate = picker.startDate.toDate();
        endDate = picker.endDate.toDate();
      });

      $("#data-label").select(() => {
        updateCharts(getLabel(), getLimit());
      })

      let getLimit = () => {
        let limit = $("#charts-limit").val();
        return parseInt(limit)
      }

      let getLabel = () => {
        let label = $("#data-label option:selected").val();
        return label
      }

      const serverId = window.SAILS_LOCALS.server.id

      updateCharts(getLabel(), getLimit());

      function updateCharts(label, limit) {
        $.get('/api/sdtdserver/data/memupdate/', {
          serverId: serverId,
          limit: limit,
          beginDate: beginDate,
          endDate: endDate,
        }, data => {
          drawAnalyticsChart(data, label)
        })
      }

    })

  </script>
