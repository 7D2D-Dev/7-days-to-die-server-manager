<%- exposeLocalsToBrowser() %>

    <div>
        <nav aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item">
                    <a href="<%= '/user/' + req.session.userId + '/dashboard' %>"> Dashboard </a>
                </li>
                <li class="breadcrumb-item">
                    <a href="<%= '/sdtdserver/' + server.id + '/dashboard' %>">
                        <%= server.name %>
                    </a>
                </li>
                <li class="breadcrumb-item active" aria-current="page">Tracking</li>
            </ol>
        </nav>
        <h1>Player tracking</h1>

        <hr>

        <div>
            <p id="playerInfo"></p>
            <p id="loaded-data"></p>
            <p id="daterange-data"></p>

        </div>

        <hr>

        <div class="card-columns">
            <div class="card">
                <div class="card-header">
                    Query
                </div>
                <div class="card-body">
                    <p class="card-text">

                        <div class="form-group">
                            <label for="tracking-location-modal-x">X</label>
                            <input type="number" name="tracking-location-modal-x" id="tracking-location-modal-x" class="form-control" placeholder="0"
                                aria-describedby="tracking-location-modal-x-help">
                            <small id="tracking-location-modal-x-help" class="text-muted">The X coordinate to search</small>
                        </div>


                        <div class="form-group">
                            <label for="tracking-location-modal-z">Z</label>
                            <input type="number" name="tracking-location-modal-z" id="tracking-location-modal-z" class="form-control" placeholder="0"
                                aria-describedby="tracking-location-modal-z-help">
                            <small id="tracking-location-modal-z-help" class="text-muted">The Z coordinate to search</small>
                        </div>


                        <div class="form-group">
                            <label for="tracking-location-modal-radius">Size</label>
                            <input type="number" name="tracking-location-modal-radius" id="tracking-location-modal-radius" class="form-control" placeholder="50"
                                aria-describedby="tracking-location-modal-radius-help">
                            <small id="tracking-location-modal-radius-help" class="text-muted">The size of the area to search.</small>
                        </div>

                        <button id="tracking-location-modal-get" type="button" class="btn btn-primary">Get location data</button>

                        <hr>

                        <div class="form-group">
                            <label for="player-name-select">Tracking player</label>
                            <select class="form-control" name="player-name-select" id="player-name-select">

                                <% players.forEach(player => { %>

                                    <option value="<%= player.id %>">
                                        <%= player.name %>
                                    </option>

                                    <% }) %>

                            </select>


                            <div class="form-group">
                                <label for="tracking-steamID-lookup">Steam ID</label>
                                <input type="text" class="form-control" name="tracking-steamID-lookup" id="tracking-steamID-lookup" aria-describedby="tracking-steamID-lookup-help"
                                    placeholder="">
                                <small id="tracking-steamID-lookup-help" class="form-text text-muted">Fill in a steam ID, CSMM will try to find a player associated with it.</small>
                            </div>


                            <div class="form-group">
                                <label for="tracking-limit">Limit</label>
                                <input type="number" class="form-control" name="tracking-limit" id="tracking-limit" aria-describedby="tracking-limit-help"
                                    placeholder="5000">
                                <small id="tracking-limit-help" class="form-text text-muted">Limit how much datapoints CSMM will retrieve. Maximum is 5000</small>
                            </div>
                        </div>

                        <input name="tracking-player-btn" id="tracking-player-btn" class="btn btn-primary btn-lg" type="button" value="Get individual player data">

                        <hr>

                        <div id="narrow-down">

                            <label for="datepicker">Narrow down data</label>
                            <input type="text" name="datetimes" />

                        </div>
                    </p>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    Location data
                </div>
                <div class="card-body">
                    <p class="card-text">
                        <table id="location-result-table">

                            <thead>
                                <tr>
                                    <th>Date/time</th>
                                    <th>Player name</th>
                                    <th>Location</th>
                                    <th>Distance</th>
                                    <th>Steam ID</th>
                                </tr>
                            </thead>

                        </table>
                    </p>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    Inventory
                </div>
                <div class="card-body">
                    <p class="card-text">
                        <table id="inventoryTable" class="table table-striped table-bordered dataTable no-footer">

                            <thead>
                                <tr>
                                    <th>Date/time</th>
                                    <th>Player name</th>
                                    <th>Item name</th>
                                    <th>Quality</th>
                                    <th>Amount</th>
                                </tr>
                            </thead>

                        </table>
                    </p>
                </div>
            </div>

            <div class="card">
                <div class="card-body">
                    <h4 class="card-title">Location</h4>
                    <p class="card-text">
                        <button id="tracking-draw-land-claims" type="button" class="btn btn-secondary">Draw land claims</button>
                        <div id="sdtdMap">
                    </p>
                    </div>
                </div>
            </div>

        </div>


    </div>

    <style>
        #sdtdMap {
            height: 60em;
            width: 100%;
        }
    </style>


    <script>

        const server = window.SAILS_LOCALS.server;
        const players = window.SAILS_LOCALS.players;
        let trackingMap
        let inventoryDataTable
        let locationResultTable
        let dateTimePicker
        let lastSearched

        $(document).ready(() => {

            $.get('/api/sdtdserver/tracking/stats', { serverId: window.SAILS_LOCALS.server.id }, data => {
                console.log(data)
                if (data.amount) {
                    $('#loaded-data').text(`${data.amount} datapoints stored`)
                }
                if (data.oldest[0] && data.newest[0]) {
                    let createdAtOld = new Date(data.oldest[0].createdAt);
                    let createdAtNew = new Date(data.newest[0].createdAt);
                    $('#daterange-data').text(`Oldest: ${createdAtOld.toLocaleDateString()} ${createdAtOld.toLocaleTimeString()} Newest: ${createdAtNew.toLocaleDateString()} ${createdAtNew.toLocaleTimeString()}`)
                }
            })

            // Data control

            $("#player-name-select").change(e => {
                let newPlayerId = $("#player-name-select").val();
                let newPlayer = players.filter(player => player.id === parseInt(newPlayerId));
                $("#tracking-steamID-lookup").val(newPlayer[0].steamId)
            })

            $('#tracking-player-btn').click(e => {
                $("#loaded-data").html(`<i class="fas fa-spinner fa-spin"></i>`);

                if ($("#tracking-steamID-lookup").val() !== "") {
                    let steamId = $("#tracking-steamID-lookup").val();
                    let playerFound = players.filter(player => player.steamId === steamId);

                    if (playerFound.length === 1) {

                        $("#player-name-select").val(playerFound[0].id);
                    }

                }
                getDataAndUpdate();
                lastSearched = 'player';
            })

            $('#narrow-down').hide();

            dateTimePicker = $('input[name="datetimes"]').daterangepicker({
                timePicker: true,
                startDate: moment().startOf('hour'),
                endDate: Date.now(),
            });

            $('input[name="datetimes"]').on('apply.daterangepicker', function (ev, picker) {
                $("#loaded-data").html(`<i class="fas fa-spinner fa-spin"></i>`)

                if (lastSearched === "player") {
                    getDataAndUpdate(picker.startDate.toDate().valueOf(), picker.endDate.toDate().valueOf());
                }

                if (lastSearched === "location") {
                    loadLocationDataAndShow(picker.startDate.toDate().valueOf(), picker.endDate.toDate().valueOf());
                }


            });

            // Location lookup

            locationDataTable = $("#location-result-table").DataTable({
                dom: 'Bfrtip',
                fixedHeader: true,
                responsive: true,
                buttons: [
                    'copy', 'excel', 'pdf', 'print'
                ],
                columns: [{
                    data: "createdAt",
                    render: function (data, type, row, meta) {
                        let date = new Date(data);
                        return `${date.toLocaleDateString()} - ${date.toLocaleTimeString()}`;
                    }
                },
                {
                    data: 'playerName'
                },
                {
                    data: 'location'
                },
                {
                    data: 'distance'
                },
                {
                    data: 'steamId'
                },
                ]
            })

            $("#tracking-location-modal-get").click(e => {

                $("#tracking-location-modal-title").html(`<i class="fas fa-spinner fa-spin"></i> Loading`);
                locationDataTable.clear();
                locationDataTable.draw();
                $('#narrow-down').show();

                loadLocationDataAndShow();
                lastSearched = 'location';
            })

            // Map
            trackingMap = new sdtdMap($("#sdtdMap"))


            $("#tracking-draw-land-claims").click(e => {
                trackingMap.clear()
                $.ajax({
                    url: '/api/sdtdserver/tracking/landclaims',
                    data: {
                        serverId: server.id
                    },
                    success: data => {

                        let drawnElements = trackingMap.drawLandClaims(data, players);

                        for (const popup of drawnElements.popups) {
                            popup.setContent(`<strong>Claim by ${popup.player.name}</strong>
                            <br>
${popup.claim.x} ${popup.claim.y} ${popup.claim.z}`)
                        }


                    },
                    error: error => {
                        console.log(error)
                    }
                });

            })




            // Inventory

            inventoryDataTable = $("#inventoryTable").DataTable({
                dom: 'Bfrtip',
                fixedHeader: true,
                responsive: true,
                buttons: [
                    'copy', 'excel', 'pdf', 'print'
                ],
                columns: [{
                    data: "createdAt",
                    render: function (data, type, row, meta) {
                        let date = new Date(data);
                        return `${date.toLocaleDateString()} - ${date.toLocaleTimeString()}`;
                    }
                },
                {
                    data: 'playerName'
                },
                {
                    data: 'itemName'
                },
                {
                    data: 'quality'
                },
                {
                    data: 'amount'
                },
                ]
            })

        });

        function getDataAndUpdate(begin, end) {
            let playerId = $("#player-name-select").val();
            let activePlayer = players.filter(player => player.id === parseInt(playerId));
            let limit = $("#tracking-limit").val();
            limit = parseInt(limit);
            $("#playerInfo").text("");

            $.get('/api/sdtdserver/tracking', {
                serverId: server.id,
                playerId: playerId,
                beginDate: begin,
                endDate: end,
                limit: isNaN(limit) || limit > 5000 || limit < 0 ? 5000 : limit
            }, data => {

                if (data.length === 0) {
                    return alert('No data found for this player.')
                }

                $("#playerInfo").text(`${activePlayer[0].name} - ${activePlayer[0].steamId}`)
                $("#loaded-data").text(`${data.length} datapoints loaded`);


                let oldest = new Date(data[0].createdAt);
                let newest = new Date(data[data.length - 1].createdAt);
                $("#daterange-data").text(`Oldest: ${oldest.toLocaleDateString()} ${oldest.toLocaleTimeString()} Newest: ${newest.toLocaleDateString()} ${newest.toLocaleTimeString()}`);

                $('input[name="datetimes"]').data('daterangepicker').setStartDate(oldest);
                $('input[name="datetimes"]').data('daterangepicker').setEndDate(newest);

                $('#narrow-down').show();

                locationDataTable.clear()
                trackingMap.clear();
                trackingMap.drawPlayers(players.filter(player => player.id === parseInt(playerId)), data);
                refreshInventoryDataTable(data, inventoryDataTable)
            })
        }

        function loadLocationDataAndShow(begin, end) {
            let elementX = $("#tracking-location-modal-x");
            let elementZ = $("#tracking-location-modal-z");
            let elementRadius = $("#tracking-location-modal-radius");
            let resultElement = $("#tracking-location-modal-title")

            elementX.removeClass('bg-danger');
            elementZ.removeClass('bg-danger');
            elementRadius.removeClass('bg-danger');

            let x = parseInt(elementX.val());
            let z = parseInt(elementZ.val());
            let radius = parseInt(elementRadius.val());
            let limit = $("#tracking-limit").val();
            limit = parseInt(limit);

            if (isNaN(x)) {
                x = 0
            }

            if (isNaN(z)) {
                z = 0
            }

            if (isNaN(radius)) {
                radius = 50
            }

            $.get('/api/sdtdserver/tracking/location', {
                serverId: server.id,
                x: x,
                z: z,
                radius: radius,
                beginDate: begin,
                endDate: end,
                limit: isNaN(limit) || limit > 5000 || limit < 0 ? 5000 : limit
            }, data => {

                if (data.length === 0) {
                    return alert("No data found");
                }

                let playerIdsFound = _.uniqBy(data, "player");
                let playersToDraw = players.filter(player => {
                    let idx = _.findIndex(playerIdsFound, trackingInfoRecord => trackingInfoRecord.player === player.id);
                    return idx !== -1
                })

                // Display result info
                resultElement.text(`Found ${playerIdsFound.length} ${playerIdsFound.length === 1 ? "player" : "players"} in this location radius.`);
                $("#playerInfo").text(`Found ${playerIdsFound.length} ${playerIdsFound.length === 1 ? "player" : "players"} in this location radius.`)
                $("#loaded-data").text(`${data.length} datapoints loaded`);
                let oldest = new Date(data[0].createdAt);
                let newest = new Date(data[data.length - 1].createdAt);
                $("#daterange-data").text(`Oldest: ${oldest.toLocaleDateString()} ${oldest.toLocaleTimeString()} Newest: ${newest.toLocaleDateString()} ${newest.toLocaleTimeString()}`);

                // Draw all the things
                refreshLocationDataTable(data, locationDataTable, x, z);
                refreshInventoryDataTable(data, inventoryDataTable)
                trackingMap.clear();
                trackingMap.drawPlayers(playersToDraw, data);
                trackingMap.drawRectangle(x, z, radius)

            })
        }

        function refreshInventoryDataTable(trackingInfo, dataTable) {
            dataTable.clear();

            let parsedDataForTable = new Array();

            for (const record of trackingInfo) {
                let player = players.filter(player => record.player === player.id)
                if (record.inventory) {
                    for (const inventoryItem of record.inventory) {


                        let parsedData = {
                            createdAt: record.createdAt,
                            itemName: inventoryItem.name,
                            amount: inventoryItem.count,
                            quality: inventoryItem.quality,
                            playerName: player[0].name
                        };
                        parsedDataForTable.push(parsedData);

                    }
                }
            }
            dataTable.rows.add(parsedDataForTable);
            dataTable.draw()

        }

        function refreshLocationDataTable(trackingInfo, dataTable, x, z) {
            dataTable.clear();

            let parsedDataForTable = new Array();

            for (const record of trackingInfo) {

                let player = players.filter(player => record.player === player.id)

                let a = x - record.x;
                let b = z - record.z;
                let distance = Math.trunc(Math.sqrt(a * a + b * b))

                let parsedData = {
                    createdAt: record.createdAt,
                    playerName: player[0].name,
                    location: `${record.x} ${record.y} ${record.z}`,
                    distance: distance,
                    steamId: player[0].steamId
                }
                parsedDataForTable.push(parsedData);
            }
            dataTable.rows.add(parsedDataForTable);
            dataTable.draw()

        }

    </script>