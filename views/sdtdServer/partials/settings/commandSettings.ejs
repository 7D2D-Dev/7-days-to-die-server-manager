<!-- COMMANDS SETTINGS -->

<div class="container">
  <p>Control the ingame commands used by your players. To see a full list of commands, check the documentation. Not all commands
    are listed here, they will get enabled automatically when their corresponding module is enabled. For example, enabling
    economy will automatically enable the balance command </p>

  <ul class="list-group">

    <li class="list-group-item">
      <label for="input-settings-commands-prefix">Command prefix</label>

      <input type="text" class="form-control" id="input-settings-commands-prefix" placeholder="<%= config.commandPrefix %>">
      <input name="input-settings-commands-prefix-set-btn" id="input-settings-commands-prefix-set-btn" class="btn btn-primary"
        type="button" value="Set">
    </li>

    <li class="list-group-item">
      <label for="input-settings-commands">Built in commands</label>

      <div class="form-check">
        <label class="form-check-label">
          <input type="checkbox" class="form-check-input" name="input-settings-commands-calladmin-checkbox" id="input-settings-commands-calladmin-checkbox"
            value="callAdmin"> Call admin
        </label>
      </div>
      <div class="form-check">
        <label class="form-check-label">
          <input type="checkbox" class="form-check-input" name="input-settings-commands-playerTeleports-checkbox" id="input-settings-commands-playerTeleports-checkbox"
            value="playerTeleports"> Player teleports
        </label>
      </div>
    </li>

    <li class="list-group-item">
      <label>Custom commands</label>

      <% customCommands.forEach(command => { %>

        <%- include('./editCommandModal.ejs', { command: command}) %>


          <% }) %>

    </li>


    <%- include('./addCommandModal.ejs') %>

      <%- include('../commandsHelpButton') %>


        <li class="list-group-item">
          <h4>Player teleport settings</h4>

          <div class="form-group">
            <label for="">Max locations that players can set</label>
            <input type="text" class="form-control" name="inputs-settings-commands-playerteleports-maxlocations" id="inputs-settings-commands-playerteleports-maxlocations"
              placeholder="<%= config.maxPlayerTeleportLocations %>">
            <input name="inputs-settings-playerteleports-maxlocations-btn" id="inputs-settings-playerteleports-maxlocations-btn" class="btn btn-primary"
              type="button" value="Set">
          </div>

          <div class="form-group">
            <label for="">Time (in seconds) that a player has to wait before teleporting again</label>
            <input type="text" class="form-control" name="inputs-settings-commands-playerteleports-timeout" id="inputs-settings-commands-playerteleports-timeout"
              placeholder="<%= config.playerTeleportTimeout %>">
            <input name="inputs-settings-playerteleports-timeout-btn" id="inputs-settings-playerteleports-timeout-btn" class="btn btn-primary"
              type="button" value="Set">
          </div>

          <div class="form-group">
            <label for="">Time (in seconds) that a teleport will be delayed. This makes sure players cannot use tele to escape a dire situation.</label>
            <input type="text" class="form-control" name="inputs-settings-commands-playerteleports-delay" id="inputs-settings-commands-playerteleports-delay"
              placeholder="<%= config.playerTeleportDelay %>">
            <input name="inputs-settings-playerteleports-delay-btn" id="inputs-settings-playerteleports-delay-btn" class="btn btn-primary"
              type="button" value="Set">
          </div>
        </li>

        <li id='settings-disable-commands-btn' class="btn btn-danger">
          <i class="fa fa-power-off"></i> Disable
        </li>
        <li id='settings-enable-commands-btn' class="btn btn-success">
          <i class="fa fa-power-off"></i> Enable
        </li>

  </ul>
</div>

<script>
  $(document).ready(function () {

    function updateCommandsStatus() {
      $.get('/api/sdtdserver/commands', { serverId: window.SAILS_LOCALS.server.id }, status => {
        if (status) {
          $('#settings-enable-commands-btn').hide()
          $('#settings-disable-commands-btn').show()
        } else {
          $('#settings-disable-commands-btn').hide()
          $('#settings-enable-commands-btn').show()
        }
      })

      $.get('/api/sdtdserver/commands/calladmin', { serverId: window.SAILS_LOCALS.server.id }, status => {
        if (status) {
          $('#input-settings-commands-calladmin-checkbox').prop('checked', true)
        }
      })

      $.get('/api/sdtdserver/commands/playerteleports', { serverId: window.SAILS_LOCALS.server.id }, status => {
        if (status) {
          $('#input-settings-commands-playerTeleports-checkbox').prop('checked', true)
        }
      })
    }

    updateCommandsStatus()

    $('#settings-disable-commands-btn').click(e => {
      e.preventDefault();
      $.ajax({
        url: '/api/sdtdserver/commands',
        method: 'DELETE',
        data: {
          _csrf: window.SAILS_LOCALS._csrf,
          serverId: window.SAILS_LOCALS.server.id,
        },
        success: (data, status, xhr) => {
          updateCommandsStatus();
        },
        error: (xhr, status, error) => {
          console.log(error)
        }
      })
    })

    $('#settings-enable-commands-btn').click(e => {
      e.preventDefault();
      $.ajax({
        url: '/api/sdtdserver/commands',
        method: 'POST',
        data: {
          _csrf: window.SAILS_LOCALS._csrf,
          serverId: window.SAILS_LOCALS.server.id,
        },
        success: (data, status, xhr) => {
          updateCommandsStatus();
        },
        error: (xhr, status, error) => {
          console.log(error)
        }
      })
    })

    $('#input-settings-commands-prefix-set-btn').click(e => {
      e.preventDefault();

      let newPrefix = $("#input-settings-commands-prefix").val();

      if (newPrefix.length > 1) {
        return alert(`Prefix is maximum one character!`)
      }

      $.ajax({
        url: '/api/sdtdserver/commands/prefix',
        method: 'POST',
        data: {
          _csrf: window.SAILS_LOCALS._csrf,
          serverId: window.SAILS_LOCALS.server.id,
          prefix: newPrefix
        },
        success: data => {
          $("#input-settings-commands-prefix").empty();
        },
        error: error => {
          alert('Error! ' + error)
          console.log(error);
        }
      })
    })

    $('#input-settings-commands-playerTeleports-checkbox').change(e => {
      let currentStatus = $("#input-settings-commands-playerTeleports-checkbox").prop('checked');

      if (!currentStatus) {
        $.ajax({
          url: '/api/sdtdserver/commands/playerteleports',
          method: 'DELETE',
          data: {
            _csrf: window.SAILS_LOCALS._csrf,
            serverId: window.SAILS_LOCALS.server.id,
          },
          success: data => {
          },
          error: e => {
            console.log(e);
            alert('Error! ' + e)
          }
        })
      } else {
        $.ajax({
          url: '/api/sdtdserver/commands/playerteleports',
          method: 'POST',
          data: {
            _csrf: window.SAILS_LOCALS._csrf,
            serverId: window.SAILS_LOCALS.server.id,
          },
          error: e => {
            console.log(e);
            alert('Error! ' + e)
          }
        })
      }
    })

    $('#input-settings-commands-calladmin-checkbox').change(e => {
      let currentStatus = $("#input-settings-commands-calladmin-checkbox").prop('checked');
      if (!currentStatus) {
        $.ajax({
          url: '/api/sdtdserver/commands/calladmin',
          method: 'DELETE',
          data: {
            _csrf: window.SAILS_LOCALS._csrf,
            serverId: window.SAILS_LOCALS.server.id,
          },
          success: data => {
          },
          error: e => {
            console.log(e);
            alert('Error! ' + e)
          }
        })
      } else {
        $.ajax({
          url: '/api/sdtdserver/commands/calladmin',
          method: 'POST',
          data: {
            _csrf: window.SAILS_LOCALS._csrf,
            serverId: window.SAILS_LOCALS.server.id,
          },
          error: e => {
            console.log(e);
            alert('Error! ' + e)
          }
        })
      }
    })

    $('#inputs-settings-playerteleports-maxlocations-btn').click(e => {
      e.preventDefault();
      let newMax = $('#inputs-settings-commands-playerteleports-maxlocations').val();
      if (!validator.isInt(newMax, { min: 1 })) {
        return alert('Please provide a valid value for max locations.')
      }

      $.ajax({
        url: '/api/sdtdserver/commands/playerteleports/maxlocations',
        method: 'POST',
        data: {
          _csrf: window.SAILS_LOCALS._csrf,
          serverId: window.SAILS_LOCALS.server.id,
          maxLocations: newMax
        },
        error: e => {
          console.log(e);
          alert('Error! ' + e)
        }
      })
    })

    $('#inputs-settings-playerteleports-timeout-btn').click(e => {
      e.preventDefault();
      let newTimeout = $('#inputs-settings-commands-playerteleports-timeout').val();
      if (!validator.isInt(newTimeout, { min: 3 })) {
        return alert('Please provide a valid value for timeout. (number larger than 3)')
      }

      $.ajax({
        url: '/api/sdtdserver/commands/playerteleports/timeout',
        method: 'POST',
        data: {
          _csrf: window.SAILS_LOCALS._csrf,
          serverId: window.SAILS_LOCALS.server.id,
          timeout: newTimeout
        },
        error: e => {
          console.log(e);
          alert('Error! ' + e)
        }
      })
    })

    $('#inputs-settings-playerteleports-delay-btn').click(e => {
      e.preventDefault();
      let newDelay = $('#inputs-settings-commands-playerteleports-delay').val();

      if (!validator.isInt(newDelay, { min: 0 })) {
        return alert('Please provide a valid value for delay. (number larger than 0)')
      }

      $.ajax({
        url: '/api/sdtdserver/commands/playerteleports/delay',
        method: 'POST',
        data: {
          _csrf: window.SAILS_LOCALS._csrf,
          serverId: window.SAILS_LOCALS.server.id,
          delay: newDelay
        },
        error: e => {
          console.log(e);
          alert('Error! ' + e)
        }
      })
    })



  })

</script>