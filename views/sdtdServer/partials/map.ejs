<div class="container">

  <div class="form-check">
    <label class="form-check-label">
      <input type="checkbox" class="form-check-input" name="map-teleports-check" id="map-teleports-check"> Teleport locations
    </label>
  </div>

  <div class="form-check">
    <label class="form-check-label">
      <input type="checkbox" class="form-check-input" name="map-players-check" id="map-players-check" checked> Players
    </label>
  </div>

  <div class="form-check">
    <label class="form-check-label">
      <input type="checkbox" class="form-check-input" name="map-players-online-check" id="map-players-online-check" checked> Only online players
    </label>
  </div>

  <div id="sdtdMap">



  </div>

</div>

<script>
  $(document).ready(() => {


    let map = initMap();

    $("#map-teleports-check").click(e => {
      let checkElement = $("#map-teleports-check");
      if (checkElement.prop('checked')) {
        drawTeleportMarkers(map)
      } else {
        deleteTeleportMarkers()
      }
    })

    $("#map-players-check").click(e => {
      let checkElement = $("#map-players-check");
      if (checkElement.prop('checked')) {
        drawPlayerMarkers(map);

        // Set only online checkbox enabled
        $("#map-players-online-check").removeAttr("disabled")

      } else {
        deletePlayerMarkers()

        $("#map-players-online-check").attr("disabled", true)
      }
    })

    $("#map-players-online-check").click(e => {
      let checkElement = $("#map-players-online-check");
      if (checkElement.prop('checked')) {
        drawPlayerMarkers(map)
      } else {
        drawPlayerMarkers(map)
      }
    })

  })

  function initMap() {

    var mapinfo = {
      regionsize: 512,
      chunksize: 16,
      tilesize: 128,
      maxzoom: 4
    }

    SDTD_Projection = {
      project: function (latlng) {
        return new L.Point(
          (latlng.lat) / Math.pow(2, mapinfo.maxzoom),
          (latlng.lng) / Math.pow(2, mapinfo.maxzoom));
      },

      unproject: function (point) {
        return new L.LatLng(
          point.x * Math.pow(2, mapinfo.maxzoom),
          point.y * Math.pow(2, mapinfo.maxzoom));
      }
    };


    SDTD_CRS = L.extend({}, L.CRS.Simple, {
      projection: SDTD_Projection,
      transformation: new L.Transformation(1, 0, -1, 0),

      scale: function (zoom) {
        return Math.pow(2, zoom);
      }
    });

    var mymap = L.map('sdtdMap', {
      attributionControl: false,
      crs: SDTD_CRS
    }).setView([0, 0], Math.max(0, mapinfo.maxzoom - 5));

    var initTime = new Date().getTime();
    var tileLayer = GetSdtdTileLayer(mapinfo, initTime);

    tileLayer.addTo(mymap)

    drawPlayerMarkers(mymap);

    return mymap
  }

  let playerMarkerMap = new Map();

  function drawPlayerMarkers(map) {

    let server = window.SAILS_LOCALS.server;

    let onlyOnline = $("#map-players-online-check").prop('checked');

    $.get('/api/sdtdserver/players', {
      serverId: server.id,
      onlyOnline: onlyOnline,
      staticOnly: !onlyOnline
    }, data => {
      playerMarkerMap.forEach(existingMarker => {
        existingMarker.remove()
      })

      playerMarkerMap.clear();


      for (const player of data) {

        let playerLatLng = L.latLng(L.latLng(player.positionX, player.positionZ));
        if (_.isUndefined(playerMarkerMap.get(player.id))) {

          let marker = L.marker(playerLatLng, {
            title: player.name,
            alt: player.name,
          });
          let popup = L.popup().setContent(`<a href="/player/${player.id}/profile">${player.name}</a>`);

          marker.bindPopup(popup)

          marker.addTo(map)

          playerMarkerMap.set(player.id, marker);
        }
      }
    })
  }

  function deletePlayerMarkers() {
    playerMarkerMap.forEach(existingMarker => {
      existingMarker.remove()
    })

    playerMarkerMap.clear();
  }

  let teleportMarkersMap = new Map();

  function drawTeleportMarkers(map) {
    let server = window.SAILS_LOCALS.server;
    $.get('/api/sdtdserver/playerteleports', {
      serverId: server.id
    }, data => {

      teleportMarkersMap.forEach(existingMarker => {
        existingMarker.remove()
      })

      teleportMarkersMap.clear();

      for (const teleport of data) {

        let teleportLatLng = L.latLng(L.latLng(teleport.x, teleport.z));
        if (_.isUndefined(teleportMarkersMap.get(teleport.id))) {

          let marker = L.marker(teleportLatLng, {
            title: teleport.name,
            alt: teleport.name,
          });
          let popup = L.popup().setContent(
            `<strong>${teleport.name}</strong><br>
                    Owner: ${teleport.player.name} <br>
                    ${teleport.publicEnabled ? "Public" : "Private"} <br>
                    Times used: ${teleport.timesUsed}`
          );

          marker.bindPopup(popup)

          marker.addTo(map)

          teleportMarkersMap.set(teleport.id, marker);
        }
      }
    })
  }


  function deleteTeleportMarkers() {
    teleportMarkersMap.forEach(existingMarker => {
      existingMarker.remove()
    })

    teleportMarkersMap.clear();

  }

  function GetSdtdTileLayer(mapinfo, initTime, isMiniMap) {
    if (typeof isMiniMap == 'undefined') isMiniMap = false;

    var tileLayer = L.tileLayer(
      'http://<%= server.ip %>:<%= server.webPort %>/map/{z}/{x}/{y}.png?adminuser={adminuser}&admintoken={admintoken}', {
        maxZoom: mapinfo.maxzoom + 1,
        minZoom: Math.max(0, mapinfo.maxzoom - 5),
        maxNativeZoom: mapinfo.maxzoom,
        minNativeZoom: 0,
        tileSize: mapinfo.tilesize,
        adminuser: "<%= server.authName %>",
        admintoken: "<%= server.authToken %>"
      })


    tileLayer.getTileUrl = function (coords) {
      coords.y = (-coords.y) - 1;
      return L.TileLayer.prototype.getTileUrl.bind(tileLayer)(coords);
    };


    return tileLayer;
  }

</script>

<style>
  #sdtdMap {
    height: 50em;
  }

</style>
