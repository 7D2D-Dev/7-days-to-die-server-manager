<div>
    <table class="table table-striped table-responsive">
        <thead id="analytics-memupdate-table" class="thead-default">
            <tr>
                <th></th>
                <th>Average</th>
                <th>Maximum</th>
                <th>Minimum</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td scope="row"></td>
                <td></td>
                <td></td>
            </tr>

        </tbody>
    </table>
</div>

<div class="row">

    <div class="col-12">
        <canvas id="analytics-memUpdate-chart"></canvas>
    </div>

</div>

<div class="row">
    <div class="col-6">
        <div class="list-group">
            <button id="btn-axisOne-fps" value='fps' type="button" class="list-group-item list-group-item-action active">FPS</button>
            <button id="btn-axisOne-heap" value='heap' type="button" class="list-group-item list-group-item-action">Heap (MB)</button>
            <button id="btn-axisOne-zombies" value='zombies' type="button" class="list-group-item list-group-item-action">Zombies</button>
            <button id="btn-axisOne-entities" value='entities' type="button" class="list-group-item list-group-item-action">Entities</button>
            <button id="btn-axisOne-players" value='players' type="button" class="list-group-item list-group-item-action disabled">Players</button>
            <button id="btn-axisOne-items" value='items' type="button" class="list-group-item list-group-item-action">Items</button>
            <button id="btn-axisOne-rss" value='rss' type="button" class="list-group-item list-group-item-action">RSS (MB)</button>
            <button id="btn-axisOne-chunks" value='chunks' type="button" class="list-group-item list-group-item-action">Chunks</button>
        </div>
    </div>

    <div class="col-6">
        <div class="list-group">
            <button id="btn-axisTwo-fps" value='fps' type="button" class="list-group-item list-group-item-action disabled">FPS</button>
            <button id="btn-axisTwo-heap" value='heap' type="button" class="list-group-item list-group-item-action">Heap (MB)</button>
            <button id="btn-axisTwo-zombies" value='zombies' type="button" class="list-group-item list-group-item-action">Zombies</button>
            <button id="btn-axisTwo-entities" value='entities' type="button" class="list-group-item list-group-item-action">Entities</button>
            <button id="btn-axisTwo-players" value='players' type="button" class="list-group-item list-group-item-action active">Players</button>
            <button id="btn-axisTwo-items" value='items' type="button" class="list-group-item list-group-item-action">Items</button>
            <button id="btn-axisTwo-rss" value='rss' type="button" class="list-group-item list-group-item-action">RSS (MB)</button>
            <button id="btn-axisTwo-chunks" value='chunks' type="button" class="list-group-item list-group-item-action">Chunks</button>
        </div>
    </div>
</div>

<script>

    $(document).ready(function () {

        let axisOneSelected = $('#btn-axisOne-fps');
        let axisTwoSelected = $('#btn-axisTwo-players');

        let axisOneDisabled = $('#btn-axisOne-players');
        let axisTwoDisabled = $('#btn-axisTwo-fps');

        drawChart()

        function drawChart() {

            $.ajax({

                url: '/api/sdtdserver/data/memupdate',
                method: 'GET',
                data: {
                    serverId: window.SAILS_LOCALS.server.id
                },
                success: (data, status, xhr) => {

                    let axisOne = axisOneSelected.val()
                    let axisTwo = axisTwoSelected.val()


                    let dataPoints = {
                        fps: data.map(dataPoint => {
                            return dataPoint.fps
                        }),
                        zombies: data.map(dataPoint => {
                            return dataPoint.zombies
                        }),
                        heap: data.map(dataPoint => {
                            return dataPoint.heap
                        }),
                        chunks: data.map(dataPoint => {
                            return dataPoint.chunks
                        }),
                        entities: data.map(dataPoint => {
                            return dataPoint.entities
                        }),
                        players: data.map(dataPoint => {
                            return dataPoint.players
                        }),
                        items: data.map(dataPoint => {
                            return dataPoint.items
                        }),
                        rss: data.map(dataPoint => {
                            return dataPoint.rss
                        }),
                    }
                    drawStats(dataPoints)

                    var ctx = $('#analytics-memUpdate-chart')
                    var lineChartData = {
                        labels: data.map(dataPoint => {
                            let date = new Date(dataPoint.createdAt)
                            return date.toTimeString()
                        }),
                        datasets: [{
                            label: axisOne,
                            backgroundColor: 'rgb(66, 134, 244)',
                            borderColor: 'rgb(66, 134, 244)',
                            fill: false,
                            data: dataPoints[axisOne],
                            yAxisID: 'y-axis-1',
                        }, {
                            label: axisTwo,
                            backgroundColor: 'rgb(229, 142, 11)',
                            borderColor: 'rgb(229, 142, 11)',
                            fill: false,
                            data: dataPoints[axisTwo],
                            yAxisID: 'y-axis-2'
                        }]
                    };

                    if (window.analyticsLine != undefined) {
                        window.analyticsLine.destroy();
                    }

                    window.analyticsLine = Chart.Line(ctx, {
                        data: lineChartData,
                        options: {
                            responsive: true,
                            hoverMode: 'index',
                            stacked: false,
                            title: {
                                display: true,
                                text: `${window.SAILS_LOCALS.server.name} statistics`
                            },
                            scales: {
                                yAxes: [{
                                    type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                                    display: true,
                                    position: 'left',
                                    id: 'y-axis-1',
                                }, {
                                    type: 'linear', // only linear but allow scale type registration. This allows extensions to exist solely for log scale for instance
                                    display: true,
                                    position: 'right',
                                    id: 'y-axis-2',

                                    // grid line settings
                                    gridLines: {
                                        drawOnChartArea: false, // only want the grid lines for one axis to show up
                                    },
                                }],
                            }
                        }
                    });


                },
                error: (xhr, status, error) => {
                    console.log(error)
                }
            })



        }

        function drawStats(data) {
            const minimum = array => Math.min(...array);
            const maximum = array => Math.max(...array);
            const average = array => array.reduce((a, b) => a + b, 0) / array.length;
            let tableElement = $("#analytics-memupdate-table tr:last");

            //             <tr>
            //     <td scope="row"></td>
            //     <td></td>
            //     <td></td>
            //     <td></td>
            // </tr>

            for (const dataPoint in data) {
                if (data.hasOwnProperty(dataPoint)) {
                    console.log(dataPoint)
                    const dataArray = data[dataPoint];

                    tableElement.after(`            <tr>
                <td scope="row">${dataPoint}</td>
                <td>${Math.round(average(dataArray))}</td>
                <td>${maximum(dataArray)}</td>
                <td>${minimum(dataArray)}</td>
            </tr>`)
                }
            }
        }

        // AXIS ONE BUTTONS

        $('#btn-axisOne-fps').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisOne-fps');
            let btnAxisTwo = $('#btn-axisTwo-fps');
            if (btn.hasClass('disabled')) {
                return
            }

            axisOneSelected.toggleClass('active');
            axisOneSelected = btn;
            axisOneSelected.toggleClass('active');

            axisTwoDisabled.toggleClass('disabled');
            axisTwoDisabled = btnAxisTwo
            axisTwoDisabled.toggleClass('disabled')
            drawChart();
        })

        $('#btn-axisOne-heap').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisOne-heap');
            let btnAxisTwo = $('#btn-axisTwo-heap');

            if (btn.hasClass('disabled')) {
                return
            }

            axisOneSelected.toggleClass('active');
            axisOneSelected = btn;
            axisOneSelected.toggleClass('active');

            axisTwoDisabled.toggleClass('disabled');
            axisTwoDisabled = btnAxisTwo
            axisTwoDisabled.toggleClass('disabled')
            drawChart();
        })

        $('#btn-axisOne-chunks').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisOne-chunks');
            let btnAxisTwo = $('#btn-axisTwo-chunks');

            if (btn.hasClass('disabled')) {
                return
            }

            axisOneSelected.toggleClass('active');
            axisOneSelected = btn;
            axisOneSelected.toggleClass('active');

            axisTwoDisabled.toggleClass('disabled');
            axisTwoDisabled = btnAxisTwo
            axisTwoDisabled.toggleClass('disabled');
            drawChart();
        })

        $('#btn-axisOne-zombies').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisOne-zombies');
            let btnAxisTwo = $('#btn-axisTwo-zombies');

            if (btn.hasClass('disabled')) {
                return
            }

            axisOneSelected.toggleClass('active');
            axisOneSelected = btn;
            axisOneSelected.toggleClass('active');

            axisTwoDisabled.toggleClass('disabled');
            axisTwoDisabled = btnAxisTwo
            axisTwoDisabled.toggleClass('disabled');
            drawChart();
        })

        $('#btn-axisOne-entities').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisOne-entities');
            let btnAxisTwo = $('#btn-axisTwo-entities');

            if (btn.hasClass('disabled')) {
                return
            }

            axisOneSelected.toggleClass('active');
            axisOneSelected = btn;
            axisOneSelected.toggleClass('active');

            axisTwoDisabled.toggleClass('disabled');
            axisTwoDisabled = btnAxisTwo
            axisTwoDisabled.toggleClass('disabled');
            drawChart();
        })

        $('#btn-axisOne-players').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisOne-players');
            let btnAxisTwo = $('#btn-axisTwo-players');

            if (btn.hasClass('disabled')) {
                return
            }

            axisOneSelected.toggleClass('active');
            axisOneSelected = btn;
            axisOneSelected.toggleClass('active');

            axisTwoDisabled.toggleClass('disabled');
            axisTwoDisabled = btnAxisTwo
            axisTwoDisabled.toggleClass('disabled');
            drawChart();
        })

        $('#btn-axisOne-items').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisOne-items');
            let btnAxisTwo = $('#btn-axisTwo-items');

            if (btn.hasClass('disabled')) {
                return
            }

            axisOneSelected.toggleClass('active');
            axisOneSelected = btn;
            axisOneSelected.toggleClass('active');

            axisTwoDisabled.toggleClass('disabled');
            axisTwoDisabled = btnAxisTwo
            axisTwoDisabled.toggleClass('disabled');
            drawChart();
        })

        $('#btn-axisOne-rss').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisOne-rss');
            let btnAxisTwo = $('#btn-axisTwo-rss');

            if (btn.hasClass('disabled')) {
                return
            }

            axisOneSelected.toggleClass('active');
            axisOneSelected = btn;
            axisOneSelected.toggleClass('active');

            axisTwoDisabled.toggleClass('disabled');
            axisTwoDisabled = btnAxisTwo
            axisTwoDisabled.toggleClass('disabled');
            drawChart();
        })


        // AXIS TWO BUTTONS

        $('#btn-axisTwo-fps').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisTwo-fps');
            let btnAxisTwo = $('#btn-axisOne-fps');

            if (btn.hasClass('disabled')) {
                return
            }

            axisTwoSelected.toggleClass('active');
            axisTwoSelected = btn;
            axisTwoSelected.toggleClass('active');

            axisOneDisabled.toggleClass('disabled');
            axisOneDisabled = btnAxisTwo
            axisOneDisabled.toggleClass('disabled');
            drawChart();
        })

        $('#btn-axisTwo-heap').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisTwo-heap');
            let btnAxisTwo = $('#btn-axisOne-heap');

            if (btn.hasClass('disabled')) {
                return
            }

            axisTwoSelected.toggleClass('active');
            axisTwoSelected = btn;
            axisTwoSelected.toggleClass('active');

            axisOneDisabled.toggleClass('disabled');
            axisOneDisabled = btnAxisTwo
            axisOneDisabled.toggleClass('disabled');
            drawChart();
        })

        $('#btn-axisTwo-chunks').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisTwo-chunks');
            let btnAxisTwo = $('#btn-axisOne-chunks');

            if (btn.hasClass('disabled')) {
                return
            }

            axisTwoSelected.toggleClass('active');
            axisTwoSelected = btn;
            axisTwoSelected.toggleClass('active');

            axisOneDisabled.toggleClass('disabled');
            axisOneDisabled = btnAxisTwo
            axisOneDisabled.toggleClass('disabled');
            drawChart();
        })

        $('#btn-axisTwo-zombies').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisTwo-zombies');
            let btnAxisTwo = $('#btn-axisOne-zombies');

            if (btn.hasClass('disabled')) {
                return
            }

            axisTwoSelected.toggleClass('active');
            axisTwoSelected = btn;
            axisTwoSelected.toggleClass('active');

            axisOneDisabled.toggleClass('disabled');
            axisOneDisabled = btnAxisTwo
            axisOneDisabled.toggleClass('disabled');
            drawChart();
        })

        $('#btn-axisTwo-entities').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisTwo-entities');
            let btnAxisTwo = $('#btn-axisOne-entities');

            if (btn.hasClass('disabled')) {
                return
            }

            axisTwoSelected.toggleClass('active');
            axisTwoSelected = btn;
            axisTwoSelected.toggleClass('active');

            axisOneDisabled.toggleClass('disabled');
            axisOneDisabled = btnAxisTwo
            axisOneDisabled.toggleClass('disabled');
            drawChart();
        })

        $('#btn-axisTwo-players').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisTwo-players');
            let btnAxisTwo = $('#btn-axisOne-players');

            if (btn.hasClass('disabled')) {
                return
            }

            axisTwoSelected.toggleClass('active');
            axisTwoSelected = btn;
            axisTwoSelected.toggleClass('active');

            axisOneDisabled.toggleClass('disabled');
            axisOneDisabled = btnAxisTwo
            axisOneDisabled.toggleClass('disabled');
            drawChart();
        })

        $('#btn-axisTwo-items').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisTwo-items');
            let btnAxisTwo = $('#btn-axisOne-items');

            if (btn.hasClass('disabled')) {
                return
            }

            axisTwoSelected.toggleClass('active');
            axisTwoSelected = btn;
            axisTwoSelected.toggleClass('active');

            axisOneDisabled.toggleClass('disabled');
            axisOneDisabled = btnAxisTwo
            axisOneDisabled.toggleClass('disabled');
            drawChart();
        })

        $('#btn-axisTwo-rss').click(e => {
            e.preventDefault();
            let btn = $('#btn-axisTwo-rss');
            let btnAxisTwo = $('#btn-axisOne-rss');

            if (btn.hasClass('disabled')) {
                return
            }

            axisTwoSelected.toggleClass('active');
            axisTwoSelected = btn;
            axisTwoSelected.toggleClass('active');

            axisOneDisabled.toggleClass('disabled');
            axisOneDisabled = btnAxisTwo
            axisOneDisabled.toggleClass('disabled');
            drawChart();
        })
    })


</script>