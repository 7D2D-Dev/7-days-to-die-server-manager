<!DOCTYPE html>
<html>

<head>
  <title>CSMM</title>

  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui">

  <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

  <!--STYLES-->
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap-grid.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap-grid.min.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap-reboot.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap-reboot.min.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap.css">
  <link rel="stylesheet" href="/styles/bootstrap/bootstrap.min.css">
  <link rel="stylesheet" href="/styles/importer.css">
  <link rel="stylesheet" href="/styles/sdtd/console.css">
  <!--STYLES END-->

  <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->


  <!--TEMPLATES-->
  
  <!--TEMPLATES END-->


  <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


  <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

  <!--SCRIPTS-->
  <script src="/dependencies/sails.io.js"></script>
  <script src="/dependencies/jquery-3.2.1.js"></script>
  <script src="/dependencies/lodash.js"></script>
  <script src="/js/app.js"></script>
  <script src="/js/bootstrap.bundle.js"></script>
  <script src="/js/bootstrap.js"></script>
  <script src="/js/console.js"></script>
  <!--SCRIPTS END-->
</head>

<body>

    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <a class="navbar-brand" href="#">CSMM</a>
      <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent"
        aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
      </button>

      <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
          <li class="nav-item active">
            <a class="nav-link" href="/">Home
            </a>
          </li>

          <li class="nav-item dropdown">
            <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true"
              aria-expanded="false">
              7 Days to die
            </a>
            <div class="dropdown-menu" aria-labelledby="navbarDropdown">
              <div class="dropdown-divider"></div>
              <a class="dropdown-item" href="/sdtdserver/addserver">Add a server</a>
            </div>
          </li>
          <% 
      if (!_.isUndefined(req.signedCookies.userProfile)) {
        %>
            <li class="nav-item">
              <a class="nav-link" href="/user/<%= req.signedCookies.userProfile.id %>">
                <%= req.signedCookies.userProfile.steamProfile._json.personaname %>
              </a>
            </li>
            <li class="nav-item">
              <img src="<%= req.signedCookies.userProfile.steamProfile._json.avatar %>">
            </li>
            <% } else { %>
              <a href="/auth/steam">
                <img src="images/steamLogin.png">
              </a>
              <% } %>
        </ul>
      </div>
    </nav>

    <%- body %>

</body>

</html>
