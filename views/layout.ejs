<!DOCTYPE html>
<html>

<head>
    <title>CSMM</title>

    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no, minimal-ui">

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/framework7.material.colors.min.css">
    <link rel="stylesheet" href="/styles/framework7.material.min.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <link rel="stylesheet" href="/styles/my-app.css">
    <!--STYLES END-->

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like React, Vue.js, Angular, Ember, and Backbone
        require that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different view engine (handlebars, dust, pug/jade, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->


    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--
        Server-side View Locals
        ========================

        Sometimes, it's convenient to get access to your server-side view locals from
        client-side JavaScript.  This can improve page load times, remove the need for
        extra AJAX requests, and make your client-side code easier to understand and
        to maintain.  Sails provides a simple mechanism for accessing dynamic view
        locals: the "exposeLocalsToBrowser()" view partial.

        For more information on using this built-in feature, see:
        https://sailsjs.com/docs/concepts/views/locals#?escaping-untrusted-data-using-exposelocalstobrowser

    -->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->

    <!--SCRIPTS-->
    <script src="/dependencies/sails.io.js"></script>
    <script src="/dependencies/framework7.min.js"></script>
    <script src="/dependencies/lodash.js"></script>
    <script src="/js/console.js"></script>
    <script src="/js/my-app.js"></script>
    <script src="/js/welcome.js"></script>
    <!--SCRIPTS END-->
</head>

<body>
    <!-- Views -->
    <div class="views">
        <!-- Your main view, should have "view-main" class -->
        <div class="view view-main">
            <!-- Pages container, because we use fixed navbar and toolbar, it has additional appropriate classes-->
            <div class="pages navbar-fixed toolbar-fixed">
                <!-- Page, "data-page" contains page name -->
                <div data-page="index" class="page">

                    <!-- Top Navbar. In Material theme it should be inside of the page-->
                    <div class="navbar">
                        <div class="navbar-inner">
                            <div class="center"><a href="/" class="link">CSMM</a></div>
                        </div>
                    </div>


                    <!-- Toolbar. In Material theme it should be inside of the page-->
                    <div class="toolbar">
                        <div class="toolbar-inner">
                            <!-- Toolbar links -->
                            <a href="/about" class="link">About</a>
                            <% if (!isLoggedIn(req)) { %>
                                <a href="/auth/steam" class="link"><img src="/images/steamlogin.png"></a>
                                <% } else {%>
                                    <a href="/auth/logout" class="link">Logout</a>
                                    <a href="/welcome" class="link">Your servers</a>
                                    <a href="/sdtdserver/addserver" class="link">Add a server</a>


                                    <p>
                                        <%=req.signedCookies.userProfile.steamProfile.displayName%>
                                    </p>

                                    <img src=<%=req.signedCookies.userProfile.steamProfile._json.avatar%>>


                                    <% } %>

                        </div>
                    </div>

                    <!-- Scrollable page content -->
                    <div class="page-content">
                        <%- body %>
                    </div>
                </div>
            </div>
        </div>
    </div>
</body>

</html>